import ".../resources/Resources.pkl"
import ".../systemd/systemd.pkl"
import ".../resources/filesystem/FileSystem.pkl"

function run(r: Run): String = r.render()

class Run {
    image: String
    name: String?
    replace: Boolean?
    privileged: Boolean?
    user: String?
    group: String?

    ports: Listing<Port>
    volumes: Listing<Volume>
    environment: Mapping<String, String>

    conmonPidFile: String?
    cidFile: String?
    detach: Boolean?
    dns: String?

    capAdd: Listing<String>
    capDrop: Listing<String>
    devices: Listing<Device>
    sysctls: Mapping<String, String>
    command: Listing<String>


    function render(): String = new Listing {
        "podman run"
        when (name != null) { "--name=\(name)" }
        when (replace ?? false) { "--replace" }
        when (privileged ?? false) { "--privileged" }
        when (user != null || group != null) {
            "-u"
            new Listing {
                user
                when (group != null) { group }
            }.join(":")
        }
        when (conmonPidFile != null) { "--conmon-pidfile=\(conmonPidFile)" }
        when (cidFile != null) { "--cidfile=\(cidFile)" }
        when (detach != null) { "-d=\(detach)" }
        when (dns != null) { "--dns=\(dns)" }
        for (port in ports) { port.render() }
        for (volume in volumes) { volume.render() }
        for (n, v in environment) { "-e \(n)=\"\(v)\"" }
        for (cap in capAdd) { "--cap-add=\(cap)" }
        for (cap in capDrop) { "--cap-drop=\(cap)" }
        for (device in devices) { device.render() }
        for (n, v in sysctls) { "--sysctl=\(n)=\(v)" }
        image
        for (cmd in command) { cmd }
    }.join(" ")
}

class Device {
    host: String
    container: String?
    permissions: String?

    function render(): String = new Listing {
        "--device=\(host)"
        when (container != null) { ":\(container)"}
        when (permissions != null) { ":\(permissions)"}
    }.join("")
}

class Port {
    ip: String?
    host: UInt16?
    container: UInt16
    protocol: String?

    function render(): String = new Listing {
        "-p "
        when (ip != null) { "\(ip):" }
        when (host != null) { "\(host):" }
        container
        when (protocol != null) { "/\(protocol)" }
    }.join("")
}

class Volume {
    host: String
    container: String
    options: String?

    function render(): String = "-v " + new Listing {
        host
        container
        when (options != null) { options }
    }.join(":")
}

fixed tzVolumes: Listing<Volume> = new {
    new Volume {
        host = "/etc/timezone"
        container = host
        options = "ro"
    }
    new Volume {
        host = "/etc/localtime"
        container = host
        options = "ro"
    }
}

function service(serviceName: String, r: Run): Listing<Resources.Resource> = new Listing {
    new systemd.UnitFile {
        path = "/etc/systemd/system/\(serviceName).service"
        state = new FileSystem.FilePresent {
            // https://www.redhat.com/sysadmin/podman-shareable-systemd-services
            content = systemd.serviceFile(new systemd.ServiceFile {
                unit = new {
                    description = serviceName
                    wants = "network-online.target"
                    after = "network-online.target"
                    requiresMountsFor = "/run/containers/storage"
                }
                service = new {
                    environment = new {
                        ["PODMAN_SYSTEMD_UNIT"] = "%n"
                    }
                    restart = "always"
                    timeoutStopSec = 70
                    execStartPre = "/usr/bin/rm -f %t/%n.pid %t/%n.cid"
                    execStart = run((r) {
                        name = serviceName
                        replace = true
                        conmonPidFile = "%t/%n.pid"
                        cidFile = "%t/%n.cid"
                        detach = true
                    })
                    execStop="/usr/bin/sh -c \"podman rm -f `cat %t/%n.cid`\""
                    execReload="podman restart \(serviceName)"
                    type = "forking"
                    killMode = "control-group"
                    pIDFile = "%t/%n.pid"
                }
                install = new {
                    wantedBy = "default.target"
                }
            })
            owner = "root"
            group = "root"
            permissions = "644"
        }

        afterAction {
            restart = "\(serviceName).service"
        }
    }
    new systemd.Service {
        name = "\(serviceName).service"
        state = new {
            enabled = true
            active = true
        }
    }
}